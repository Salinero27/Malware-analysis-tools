from idautils import *
from idaapi import *
from idc import *

def decrypt(text, key, text_size):
	pointer=0x422720
	count=0x00
	count_word=1
	byte = Byte(text)
	cadena=""
	letra=""
	offset=text

	while count <= text_size:
		patch_byte(text,byte ^ ord(key[count%0x40]))
		#print chr(byte ^ ord(key[count%0x40]))
		letra=byte ^ ord(key[count%0x40])
		cadena=cadena+chr(letra)
		if letra==0x00:
			print "palabra: "+str(count_word)+" offset: " + str(offset) +" texto: " + cadena
			cadena=""
			offset=text
			count_word=count_word+1
		text = text + 0x01
		byte = Byte(text)
		count= count+1


addr_aux=""
text=""
for segea in Segments():
    for funcea in Functions(segea, SegEnd(segea)):
		addr = FindBinary(funcea, SEARCH_DOWN, "68 ? ? ? ? E8 ? ? FF FF 83 C4 08 A3")
		if (addr != addr_aux or addr_aux== "") and hex(addr)!= "0xffffffffL":
			if text != GetOperandValue(addr,0):
				text = GetOperandValue(addr,0)
				text_size = GetOperandValue(prev_head(addr),0)
				key = FindBinary(addr, SEARCH_DOWN, "0F BE 92 ? ? ? ?")
				key_size = GetOperandValue(prev_head(prev_head(key)),1)
				if hex(key) != "0xffffffffL":
					key = GetOperandValue(key, 1)
					key = get_many_bytes(key, key_size)
					decrypt(text, key, text_size)
		addr_aux = addr